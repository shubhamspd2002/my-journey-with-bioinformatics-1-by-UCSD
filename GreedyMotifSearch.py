def profile_most_probable_kmer(text, k, profile):
    """
    Find the most probable k-mer in the given text based on the given profile.
    """
    max_prob = -1
    most_probable_kmer = ""
    
    for i in range(len(text) - k + 1):
        kmer = text[i:i + k]
        prob = 1.0
        for j in range(k):
            prob *= profile[kmer[j]][j]
        
        if prob > max_prob:
            max_prob = prob
            most_probable_kmer = kmer
    
    return most_probable_kmer

def build_profile(motifs):
    """
    Build the profile matrix from a collection of motifs.
    """
    profile = {'A': [], 'C': [], 'G': [], 'T': []}
    k = len(motifs[0])
    t = len(motifs)

    for base in 'ACGT':
        for j in range(k):
            count = sum(1 for motif in motifs if motif[j] == base)
            profile[base].append(count / t)

    return profile

def score_motifs(motifs):
    """
    Compute the score of a collection of motifs (sum of hamming distances).
    """
    k = len(motifs[0])
    t = len(motifs)
    score = 0

    for j in range(k):
        count = {'A': 0, 'C': 0, 'G': 0, 'T': 0}
        for i in range(t):
            count[motifs[i][j]] += 1
        max_count = max(count.values())
        score += t - max_count

    return score

def greedy_motif_search(dna, k, t):
    """
    Perform Greedy Motif Search on the given collection of DNA sequences.
    """
    best_motifs = [sequence[:k] for sequence in dna]

    for i in range(len(dna[0]) - k + 1):
        motifs = [dna[0][i:i + k]]

        for j in range(1, t):
            profile = build_profile(motifs)
            motifs.append(profile_most_probable_kmer(dna[j], k, profile))

        if score_motifs(motifs) < score_motifs(best_motifs):
            best_motifs = motifs

    return best_motifs

# Example usage:
k = 12
t = 25
dna = [
    
"GCCATGCCAAAGGTGTATGAGGGGCCTTTGTAGTTTTGTGGGCTGGTGGGGCTAGGGCCTATCCCAGTGCCTGCAATTGATAGCCAATCTTTTAGAAACGGGATCTAATGCCGACGCACTTGCTGGATTTGGGCAAGATGTACCAAACGCAAGTCA", "CCCTAAAAGGCATTCCCCACCTCGTAATAGGCGCGCCAACGGATGCGGTCTCACGACGGTCGCTCCCTTCGGAGTCCAAAAGATAACCCAGTGCCTTCCATTGAACGTGTGGGCACCTCGGCGCATCAGCCCGAAGTGTCATTACGTTCGACGGTC", "CCCCCTGTGCCTCGTTCAAATTGGGAGAAAATGTGTCTGATTGGGGAATACCATTCTACGGGGTTCACTGGTCAGGAGGCGGGCAATAATAGGGTGATTCGCAGGCCTGGATGCGGCCCCGTGTCGGATGTTGCAAGGGATAAGTTATTTCTACTA", "GGTAGTGCTCAATATTTATGATTGACGTGCTGGACGTGCACTGACGATCAGGATGTGCACCCTCATTGCGCGTTTGGCTACTAAATGGCCCTAAAGTATAGTACAACGACCTAAATAGGCTCCGCCGTGCCTGCAGCCAATGAATCCCAGCAACGA", "AAGGTACAATGTTATCGGTTTGGATGGATACTTCATGGCGAACACAGTAGCCCAGTGCCTCTCACTCCCGCGTTGATGGCGAACGTACCCCGAAGCGGATTGAAAGGCATATGAGACGAGAAAGACTATCTGGTTCGAAACAAGCATTAGCCGGGG", "CCATGCACTTTGGTACTTCCTTGAGCATCAGTTACAAAGCTAGATGAAATGTAAAGATGATGAGTTTTCACATGCAATCAACGCTCACAGTCCCCCAGGTCGTACCTTAGTCTGGCACTATTCTCCGTGCCTCGACTAAGGATTTTAGATGTAGAT", "TAGTCAGTAATTTGGCCACACATGGGCCCGGTGCCTCCTTATAATGTAGGAGGTCTGGTGCCGCATTTCATCGCAGCCCCGTGCCGCTGATGATTCGTGGTAGATCTGTACATGTTAACGTCGGTAATCCAGGCCCTTCCCTAGTGCGCTTTAGTT", "GATCCCGATACCTGCACAGTGCCTTAGTTAGCATTCCCACCTACAGATATAAGAGAAGACCATCCCATCGACGAATAATGTTTACCAATGAGTCGCGTACGCCGGCGGTACCATTCTAGAGGCGATATTCGACGATTCTCGCTTCGCGTCCTGCCT", "ATACCTCAGTCCCTGTGAAGTAGCATGCATGAGCGTTACGCTGGCATAGGAACTTCTCACTATCCTTTACGTTACATCGTTGCGAGTCCATAAGTGAGTGCCGCTTTCATCGCCGTGCCTCATACCATGTCTCCAGGAAACTGAGACGAGATTCGC",
"CGACACTCTCTGCACGCCACCATACAGTGCAACATCTCCGATAAAATACCTTGGGATAAAGTCCCGGTGCCTCAGGATACCCTTTTAATGTATCAGTAAATGGGCTCTCTGTAGTAGAACATCCCCGTTTCTTACCTATGGGCGTCCCACATTCAC", "TGACCCGCCCTTACTATTACCTCTATTGGATAGCCCTATGCTTGCGCTATCCCAGTGCCTGCGCATACACCCCTTCCAGGAGCGGAGTAGCCTGGGGATGAGTTAGGGACACCAGCTTCAAATACCTAGATTAAACGTTTCAGATCATAGGGGCAG", "AGCTCGCGGGCGTTACGACTCAAAGACGGCGCCGCGCTTGGTTGCACATAGGATACTATGCGAGCATATTTGGCCGCATCAGCAGACCCTGTGCCTTATCCGCTGACGGTGATCTAGGTGGTTCAAGAATATTTGTGACCCAGAGACAAACCGGCC", "AATGATGAGATCCCCACACATGGCTTTCCCAGGTCTCCAAGGCGGCTCAGCTACCTTGTTATTGATGCGTAAGTTTTAAAGGATCGTTAGCAGCTCGACGTTTCGCGGAGATGCAGAACTTCCACCGTGCCTGCGGCACAGCACCGGTTGAGCACA", "CGCGCGGTACTATACGACCACGTGCGCCCAGTGCCTGGGCGCAGTAGTTCAAACAAATGTAGGCCGGTCTGATTTCACTTTTCCGTAGAGCAGAGAGTGTGCATTGGGTATGAAAGAATGGCGATGCTTGATCTTGGTGGATCGTGGCGCTTTTGG", "TCTCCTATAATGAGAAATTGGGGAGAAGACGGCAAATGGTGGAGTAGCCGGCCCCCGGAGCCCGAATGACTAGTCGCCGTGCCTAGTAATTCCACCGGTATGATTCAGGGCCAGAACAGAAAACTGCGCCCTCACGCCAAAAAATCCAGTTTCATT", "CGGTCCCCGTTGCAATGAGCATAGCAATGGATCAGATACTAATGATTGAGAGCCGTGCGTGCCTAGGAATCCGACCGTTTGTGCAGTGTGTAACGTGTCACTAGCGACAGGACAGTAGCTACCTGCCGGCGGCTACACTTAGGAGCCACTGTGCCT", "ATCTGTCACCCTTATTCCTCCAGAATAGACACGAATTGGCGAGATGGGTCCCTTAAGAACCTCTATGATGACAGCGCCGTGCCTCGCTCTAACTGTAGGGTTATAGTCGAAAGAGGGTACATACGATTGGAAAGCATTAGTCGATGTATCTGACTA", "GTGTTTGCTTTGGTGGTCGCGGCTCGGCCCTTTCGAAAGTGCGGAATATCCACTGTGCCTCAAGTGACGCGTTAATGTGAGAGGCCAAGGTAGCTGATGAGACTTCGAAAGAGAACACGCAGTCCCTTTTGTATGCTTAGCGGGTGTGGTGGTTGC", "CGTTACATAGGAATCAGGTCTGTTATCGCATCCACCTTCGCTACAGATCGTGTGGGGTCGTTCACTGTGCCTAGGGGAGCACGAATTTGCGAGCCTTATCCGACCTTTGTAACGACGGCCTACAGCATTCATGCATCTCCAAATCATGAGGGTGCG", "GTACAACGCGCGGGCAGCGGTATCTGTCCTCACTTCTGAGGCGTCACACTTTGTAGATACAGGTCTCACTTACCCGAAGGGGTACTCGCCGTGCCTACCTCTGGTCGGATCGACGTGTTATTGGAAAGGTCTTAGAGGAACGATTGGGGATGGTGA", "AAATACCGGCGGGCTTTCGCAAAAAAATAACTGTCCAATACGTGATCTGGAAACTAACAACCGATGCTCGCGCGAGAGGTCCAGTCAGCGGCGGCGTCCTCGGTGCCTTAGTGCGCTTTGTGTTTGCCTTGTGATCTTCCCGTGCTGACGTTATTG", "CGTTCAAGACAGTTCTAGGTTCCTTCTGAGGCCGACCACTATAACGGTTACACTATCATCCCGATTCTGTAGGCTAGGGCGGGCGGGTGCACGCGACCTGTCTTCACCACGCCATCCAACTTCTCGGTGCCTGATTACACATCGGAGTACCCGCGA", "CTCACAGTGCCTAAGATTACGGGCCTAATCCGAACGAGATCCAGGGGTATCATAAGACAAGAGGACCTGTCAATCGTATGGAATGCGGTTATACCTCCGAAATTAGAGATTTGGTAAGGACGATTACAGGGTACCAGCACGGGATAGGGACTCATA", "GGACAGTCACCGTTCACCGTGCCTTTGTTAGTGCGTCTACCAGTGACATTTCGGGTATGGCCTCACATCCGCTCCGCCACATAATCTATGCACTAACAATCAGAGTTACGGGACGATATGTGAAACTCTAAAGGGGCAGCGTATGACTGCTCGCTG", "ATGTTGCGCGTGCGCCAGTGGAGGAAAAGACTCACCAGCTATGGCGTCATATAGGTATCGACGGTATTTGTCGCAGCGGTGGGACTTCTAGGACTCAGCATATTTTGAAGCTAGACGACCATCGCTGTGCCTCGTACCCTTGCGGCAGGTGCGACG",

]

result = greedy_motif_search(dna, k, t)
print(" ".join(map(str, result))) 
