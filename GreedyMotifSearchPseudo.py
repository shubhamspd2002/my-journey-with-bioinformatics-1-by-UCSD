def profile_most_probable_kmer(text, k, profile):
    max_prob = -1
    most_probable_kmer = ""
    
    for i in range(len(text) - k + 1):
        kmer = text[i:i+k]
        prob = 1
        for j in range(k):
            prob *= profile[kmer[j]][j]
        if prob > max_prob:
            max_prob = prob
            most_probable_kmer = kmer
            
    return most_probable_kmer

def profile_with_pseudocounts(motifs):
    profile = {'A': [], 'C': [], 'G': [], 'T': []}
    k = len(motifs[0])
    t = len(motifs) + 4  # Pseudocounts
    
    for base in profile:
        profile[base] = [1] * k
    
    for i in range(k):
        for j in range(len(motifs)):
            profile[motifs[j][i]][i] += 1
    
    for base in profile:
        for i in range(k):
            profile[base][i] /= t
    
    return profile

def score(motifs):
    k = len(motifs[0])
    t = len(motifs)
    score = 0
    
    for i in range(k):
        column = [motif[i] for motif in motifs]
        max_count = max(column.count('A'), column.count('C'), column.count('G'), column.count('T'))
        score += t - max_count
    
    return score

def greedy_motif_search_with_pseudocounts(dna, k, t):
    best_motifs = [sequence[:k] for sequence in dna]
    
    for i in range(len(dna[0]) - k + 1):
        motifs = [dna[0][i:i+k]]
        
        for j in range(1, t):
            profile = profile_with_pseudocounts(motifs)
            motifs.append(profile_most_probable_kmer(dna[j], k, profile))
        
        if score(motifs) < score(best_motifs):
            best_motifs = motifs
    
    return best_motifs

# Example usage:
k = 12
t = 25
dna = ["CAGGCTTCTGAGGACCGGGGGATGGTCTTATTTGCAACATTACCGTCTTTCCCAGTGGAAAATTTAAACCCGGGGAAAATGAACAGAAATATACCATGTCAGTTTCCATCGCGGTGGAGAGCCGAGTCACCAGTGTGTCTACGACTTCCCGAACGC", "CCCTCTGACGTAAATCTGGCGGTGCGCGTTCACGGCATGTGACTTGAAAGTGCTCGGTGACTCGCGTACACCGTAATATTTCCAGCTCACGAAGGCCGCGAGGCGTTCCGAATTTCAAAATCACGGGGGAACCATAAAGCAGCCTGGCTACATGCC", "ACAAATTCCGTCGTCGTATTTGCAATTGGGGTCCGGGACTGGCATATGTTGCCGCATCCACACCACCGCGGCTACGAGTGGGCACTTTCAGAGTATAAAAACTAGTTATGAAGTTATGCGGCCGGAGAACACAATGACAAGCGTGTTTCGTGTGCC", "ACCTGTCACGTACGATTTTACTGCGTCTTGTTTGACATTAATTCGCACCGCTTCAGTGTGAAGTCACTGTTAAGTTACTAGTCCACTCGCAGGTTCTGCGCTCGTAGATTCGAATTATTGGGAGTTCGCATCGTCCGATTTACAGTACATCCCGGT", "TCCCGACAATATCCAGCAGCGCTGCCCCACAGGGTATCATCTATGTTCACACGCTTCAAAACAAATCAGCCTCACGTGTTTATTGTCCCATTTTCACGGTCATCGATTCCCAGGTCTAGATTCTTGATGCCTCCTTTTGGAGACATGCGGCACTCT", "GTTGCCTCCTCTCTCCAATGCGTACATCTTTGTACTTACGCAGTCTCCGCGTGAGTGATCGTTACGTGAGGTGACGGCGGTGTTACGAAATGATTCGCCTTCTGCTATCCAACCGATACAACTTAATGCATGGTTCAATTTGCATGATTAAGGGTC", "CCGATAGCCTACCGTTCATTTTATGCTTATTTTCCCGTCGTCTCGAACCAACATGTTGCCGTGATATTTACATCATGAGACATCGGTTCCCACCCCAGGATTTATGTATTGGAGGCTGTCGCTAGCATTTCTCTCCTGTGCCTTAGGTAGTCGGGA", "AGGAAGATCGAGCGGGCATCCCACGCGTGACCATCGTCGAGGTCTCATAACTCAATGTCCACCGATCACTCGGTGGTATTTCCATTGACATAGAAAGGAAAAGGTAACAAAAAAATAAGACGGTCCGGGTTGTAGACCTAGGTGCGAGAACCCTCC", "TTCCATGGGTTTACGTGAGAGTGAGTTCTATTTGCATACTCGAGACAATTAGACGCCGGTATAATGGAGCCCGGCCCGCGCTCAACTGCGCTTGGCTACGATGGATTTCAGAGCTTTCAGATACCAAGACGGAACTTAATGTAGTGAAATAGAACG", "CCTATTATTTCCTGGGGGATTGTCAGTAATCTAGGGATCCTACTCTTCGGCCTCCGCCAGCGGTCACAGATCTAGTACTAACGTTAGGCGCCTGTTTAGCTGCTTCCTTCCATTTTCACGGTGTAATTTTCATTTGCCCAAACACAGTTATTCGCC", "GGTAAGATGGAACGTCGTTAGCTACTCATACTATTCGTATTATTTCCAGCGAATAAGCTGAGCAGAATGGCTATTCTGAGGTGGATATAGGTCCTACCGTGCGAAACCTCTAGGCTTCTAACTTCTTTCAGAGCAGTCAGTCGTCAGAGTGTGCGA", "GTACTCATAGATCCTCCTCTCTACTGCCAAACACCACGACCCGCTATTGGAGGACGCTTGGGGCGTTTACTGTCTCATACGCGATTGGGACGGGTGATTACTGTTTTCGTGGGCTTAAGGGTACTTTGACAAGTACTATTTACAAAGATGGAAATA", "AGTGGCCCCATAGAATTGCGGCACCTTTCTGCTAACGATCATTTCACATAAACCAGATGACCTCCTTGAATTAAGGATATGGGGTATTTTACAGGCCTCGATTGCTAAGCCTCCTATGCGCTAACGCACATCGTGACATTTTCAATCCAGCAACAG", "CTGACGGGGGATGCGTTCACTGGGTACCAAGGTACCACTACTCCAATGGTTCGATTTTCATGAAGGCGCGCAGAGATCAGAATGATCAACACACCTTCGCGGAATCTTGGGACACTATTTTATTGTGACAAAACCGAAGTATGTCATCACAGCAAG", "TCCTGGTATTCCAGATCCGCCAAAAGCGACGTAGTTAAGTCTAGGAGAATGATTCACGGGGCATAAGCCGTAACATGACACGCCGTCCAATTTCCAATGTAGGTCGCACACGGATATCCAGGGCGTTGCGTTGTAAGAGGCAGAAACGATAGAGAT", "GGCTTTTATGCAGTATTATTTGCATCGTGACCCCGGCCAAAAAAGTTCCTTTCAGAGGCAGCCACCATCAGATCGTGCGTTATTTACTACCCTAGTAGAGACGAACGATCAGCAGTCGGGTCCGGAAACAGCACCTAGCTTTTCTCAGATCGAAAG", "ACAGGCTCGGTGGTAAACCTCCGTTACGCCGTCCCTATGTTTCTAACGTTGAATACGGAAGAGGTTGGCACCGTCCCATTTACAAGGTTTGTGTTAGTTACATTTGCTGCCTGAATTATGGACCGGAGGCGTGAAAACCACGAGACCTCAAGTCTA", "TCACCACAGGGAAGGAACTTATTACCCCCTACTGCAGCAACCTTCTAGACGAAGGGCGGCACTCGTTTACTCGTGTGATTTGCATTCGTTGAGAGAACCATGGTTTACTGAGCCGGCACAGCCTTGAACTGGAGGGCTAAAAAGCCTTGTTTGCTG", "ACGGTTGATGTGTTGCCAGAGTAACCAATCAAAGACTAAACGGTCCGGGAATGAGGCATGCTAGTGGCTAACTGCTGTTTGGCCACTGGTAAAAATAATCTGTGTGATATCATAATTAGTGCCGACGCATATTTAGGCCCCTGTGTTAAATTTCCA", "TGGAGACCGAGTCTTTGACGCAGGGACCATATAGGACGAAACAACAGACCGGCGAACAACAGCATACATGTCCTTAGTGTATTTTCATCGAACGACCGTCTATCAATCTTCACTGACGGAAGAAACCTGCCTAGGTGAGCCTTTGTAGAATTTGCA", "ACGTAGCCTGCTCCAAGTATGGCCCTTCGGGGGGTGGCGGACCTCCTTCTTAATACTGCGAGAGTCACTGCAGTACCTCTTAAACGTTAATCTCGCGTGGTTCGTAATTGCAATAGTTCCGTTGAATTTTCAACTTCACATGCTAACTATGCCCCT", "TATCCCGATTTTCATTGAGCCCCGTCAATTGACAGTTATTCGCTTAGCGTCCGACAGTGACAGGGCGTCTTTCCAGCTTACAGTTCTTCGCCATCGGTCGTGCGATCAGAAGTATTCGTGTAAAAACCGTGGGTTTCATTTGCATGCGGGATCTTG", "GCCCGATAGAGCCGGCAGCACTTAATTCCACTAGCGAGATCTCCATAGTGCGCACTAGAGACGGCTGGCGGGTTCCTATGTTTTTCTCCAATTACATTGCTCCATCGAACCTCTTATCCACATGAGACCTTGAAGACTACGACAGTAGGATTTGCA", "CTCCGCAGCCCAGTTTTAAGCCCCGAAGCAAAAGCACTGGAGGAGCCATCAGTTGATCTTATATGTACACCCATATGCAGGTCTTAGTTATGTTTCCCTCTCGAAGCGATTGATCGTCCCGGCAGGGGTGGCATACGGCCCGTGGTAGTATTTGCA", "TGCGGAGGTGCCCACGTCTCACCGAACCCCGGAAATACTGATTGGGTGTCGTATCAATACGGGCGTTACCGGGGCTATAGCCGGCGAAATATGATACTACTGCTAATAACCTTAGCGGACGTAGGATTTGCAAGCGACTTCAATTATTAAGGCTGT"]

result = greedy_motif_search_with_pseudocounts(dna, k, t)
print(" ".join(map(str, result)))
